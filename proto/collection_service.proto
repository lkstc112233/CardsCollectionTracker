syntax = "proto3";

import "binder.proto";
import "card.proto";

package card_collection.service;

// The collection service definition.
service CollectionService {
    // Updates collection metadata from scryfall
    rpc UpdateMetadata (UpdateMetadataRequest) returns (UpdateMetadataResponse) {}
    rpc AddBinder (AddBinderRequest) returns (AddBinderResponse) {}
    rpc ListBinders (ListBindersRequest) returns (ListBindersResponse) {}
    rpc UpdateBinder (UpdateBinderRequest) returns (UpdateBinderResponse) {}
    rpc DeleteBinder (DeleteBinderRequest) returns (DeleteBinderResponse) {}
    rpc QueryCardInfoByName (QueryCardInfoByNameRequest) returns (QueryCardInfoByNameResponse) {}
    rpc AddCardToCollection (AddCardToCollectionRequest) returns (AddCardToCollectionResponse) {}
    rpc DeleteCardInCollection (DeleteCardInCollectionRequest) returns (DeleteCardInCollectionResponse) {}
    rpc MoveCardToAnotherBinder (MoveCardToAnotherBinderRequest) returns (MoveCardToAnotherBinderResponse) {}
    rpc ListCardInBinder (ListCardInBinderRequest) returns (ListCardInBinderResponse) {}
}

message UpdateMetadataRequest {
}

message UpdateMetadataResponse {
    // A counter for downloaded cards count.
    int32 cards_downloaded = 1;
    // A counter for downloaded sets count.
    int32 sets_downloaded = 2;
    // A counter for downloaded oracle count.
    int32 oracle_downloaded = 3;
}

message AddBinderRequest {
    string name = 1;
}

message AddBinderResponse {
}

message ListBindersRequest {
}

message ListBindersResponse {
    repeated card_collection.Binder binders = 1;
}

message UpdateBinderRequest{
    int32 id = 1;
    string new_name = 2;
}

message UpdateBinderResponse {
}

message DeleteBinderRequest {
    int32 id = 1;
}

message DeleteBinderResponse {
}

message QueryCardInfoByNameRequest {
    // Will be used for partial match
    string query = 1;
    // Whether only query English cards.
    bool en_only = 2;
    // Whether the query will match the first part of the query.
    bool front_match = 3;
    // Maximum number of cards to be returned. 0 for unlimited.
    int32 result_limit = 4;
}

message QueryCardInfoByNameResponse {
    repeated card_collection.CardInfo info = 1;
}

message AddCardToCollectionRequest {
    // Card scryfall id, found in Card object.
    string card_id = 1;
    // Card version. Left empty for non-foil cards.
    string version = 2;
    // Binder id to be added into. Left empty for the "Unbinded" binder.
    int32 binder_id = 3;
}

message AddCardToCollectionResponse {

}

message DeleteCardInCollectionRequest {
    int32 id = 1;
}

message DeleteCardInCollectionResponse {

}

message MoveCardToAnotherBinderRequest {
    int32 card_id = 1;
    int32 new_binder_id = 2;
}

message MoveCardToAnotherBinderResponse {
}

message ListCardInBinderRequest {
    // If unset, will respond by all collection.
    int32 binder_id = 1;
    // If true, will respond by only card and count.
    bool name_only = 2;
}

message ListCardInBinderResponse {
    // populated only if name_only is off.
    repeated card_collection.Card cards = 1;
    // populated only if name_only is on.
    map<string, int32> cards_names = 2;
}